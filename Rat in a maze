

/*
    1 0 1    1 0 0
    1 0 1    1 0 0 
    1 1 1    1 1 1
    
    
    
    1 1 1
    1 1 1
    1 1 1
    
    

*/

bool outOfBoundary(vector<vector<int>> &vec,int i,int j){
    int n = vec.size();
    if(i<0 || j<0 || i>=n || j>=n) return true;
    return false;
}


void addPath(vector<vector<int>> &ans,vector<vector<int>> &vis){
    
    vector<int> temp;
    for(auto c:vis){
        for(auto d:c) temp.push_back(d);
    }
    
    ans.push_back(temp);
    
}

void solve(vector<vector<int>> &maze ,vector<vector<int>> &ans,
          vector<vector<int>> &vis,int i,int j){
    
    if(outOfBoundary(maze,i,j)  || vis[i][j] || maze[i][j]==0) return;
    if(i==0 && j==0){
        vis[i][j] = 1;
        addPath(ans,vis);
        vis[i][j] = 0;
        return;
    }
    vis[i][j] = 1;
    solve(maze,ans,vis,i+1,j);
    solve(maze,ans,vis,i-1,j);
    solve(maze,ans,vis,i,j-1);
    solve(maze,ans,vis,i,j+1);
    vis[i][j] = 0;
    
}


vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
    vector<vector<int>> vis(n,vector<int>(n)),ans;
    
    solve(maze,ans,vis,n-1,n-1);
    return ans;
    
}
